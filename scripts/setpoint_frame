#!/usr/bin/env python

# setpoint_frame
#
# Python script extending mavros setpoint_position capability to
# handle multiple frames instead of frame_id: fcu only
# 
# @author   Syler Wagner    <syler@mit.edu>
#
# @date     2016-07-18      creation

from __future__ import division

import rospy
import tf
from geometry_msgs.msg import PoseStamped   # for sending commands
from mavros_msgs.msg import State   # for reading arming state

class SetpointFrameRepublisher():

    def __init__(self):

        self.x = 0
        self.y = 0
        self.z = 0

        self.rate = rospy.get_param('~rate', 1) # 1 Hz rate default
        self.frame_id = rospy.get_param('~frame_id', 'map')
        self.topic = rospy.get_param('~topic', '/mavros/setpoint_frame/'+self.frame_id)

        # set initial state to disarmed and mode to stabilize
        self.armed = False
        self.mode = "STABILIZE"

        # mavros state message subscriber
        rospy.Subscriber('/mavros/state', State, self.update_state)
        

        # tf listener
        listener = tf.TransformListener()


        # subscriber for setpoints in custom frame
        self.pose_sub = rospy.Subscriber(self.topic, PoseStamped, self.pose_callback, queue_size=5)
        # publisher for setpoints in fcu frame
        self.pose_pub = rospy.Publisher('/mavros/setpoint_position/local', PoseStamped, queue_size=5)
    

        print " [>  ] Ready to republish setpoints!"
        rospy.logwarn('Listening for transform between %s and fcu frame', self.frame_id)
        rospy.logwarn('Subscribing to: %s', self.topic)
        rospy.logwarn('Republishing setpoints to /mavros/setpoint_position/local')


        while not rospy.is_shutdown():
            
            # if self.armed and self.mode == "GUIDED":
            #     # only publish setpoint messages if the UAV is armed
            #     # because the necessary transforms only get initialized
            #     # after arming
            #     # and if it's not in GUIDED mode they will have no effect
            #     print " [ > ] GoTo Lat: %4.8f   Lon: %4.8f   Alt: %4.1f " % (self.msg.latitude, self.msg.longitude, self.msg.altitude)
            # else:
            #     print " [ ! ] Not armed in guided mode!"

            try: # try to look up transform and republish setpoint
                (trans,rot) = listener.lookupTransform(self.frame_id, 'fcu', rospy.Time(0))
                x = self.x - trans[0]
                y = self.y - trans[1]
                z = self.z - trans[2]
                self.publish_pose_msg(x, y, z)

            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException), e:
                rospy.logerr(" [!!!] setpoint_frame exception: %s", e)
                continue

            rospy.sleep(1/self.rate)

    # update arming and mode state
    def update_state(self, state_msg):
    
            if self.armed != state_msg.armed:
                print " [>>>] Armed: " + str(state_msg.armed)
                self.armed = state_msg.armed

            if self.mode != state_msg.mode:
                print " [>>>] Mode: " + state_msg.mode
                self.mode = state_msg.mode

    def pose_callback(self, pose_msg):
        
        # error checking
        if not self.frame_id == pose_msg.header.frame_id:
            rospy.logerror("Received unexpected frame_id: %s instead of frame_id: %s on %s topic!", self.frame_id, pose_msg.header.frame_id, self.topic)

        self.x = pose_msg.pose.position.x 
        self.y = pose_msg.pose.position.y
        self.z = pose_msg.pose.position.z

        rospy.logwarn("Got :x %2.1f y: %2.1f", self.x, self.y)


    # create a PoseStamped message
    def publish_pose_msg(self, x, y, z):
        pose_msg = PoseStamped()
        pose_msg.pose.position.x = x
        pose_msg.pose.position.y = y
        pose_msg.pose.position.z = z
        pose_msg.header.stamp = rospy.Time.now()
        pose_msg.header.frame_id = "fcu"
        self.pose_pub.publish(pose_msg)

if __name__=="__main__":
    
    print " [>  ] Starting setpoint_frame node..."

    rospy.init_node('setpoint_frame')

    try:
        SetpointFrameRepublisher()
    except rospy.ROSInterruptException:
        print " [!!!] setpoint_frame: ROSInterruptException!"
        pass



